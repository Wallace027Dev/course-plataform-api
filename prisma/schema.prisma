generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Course {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  journeys    Journey[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Journey {
  id        Int       @id @default(autoincrement())
  name      String
  course    Course    @relation(fields: [courseId], references: [id])
  courseId  Int
  contents  Content[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Content {
  id        Int            @id @default(autoincrement())
  journey   Journey        @relation(fields: [journeyId], references: [id])
  journeyId Int
  type      String
  title     String
  order     Int
  metadata  Json
  quiz      Quiz?          @relation(fields: [quizId], references: [id])
  quizId    Int?           @unique
  progress  UserProgress[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  deletedAt DateTime?
}

model Quiz {
  id        Int        @id @default(autoincrement())
  name      String
  questions Question[]
  attempts  Attempt[]
  content   Content?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
}

model Question {
  id          Int       @id @default(autoincrement())
  question    String
  explication String
  quiz        Quiz      @relation(fields: [quizId], references: [id])
  quizId      Int
  answers     Answer[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Answer {
  id         Int       @id @default(autoincrement())
  text       String
  correct    Boolean
  question   Question  @relation(fields: [questionId], references: [id])
  questionId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model User {
  id        Int            @id @default(autoincrement())
  name      String
  email     String         @unique
  attempts  Attempt[]
  progress  UserProgress[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  deletedAt DateTime?
}

model Attempt {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  quiz      Quiz      @relation(fields: [quizId], references: [id])
  quizId    Int
  result    Result?
  timestamp DateTime  @default(now())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Result {
  id        Int       @id @default(autoincrement())
  attempt   Attempt   @relation(fields: [attemptId], references: [id])
  attemptId Int       @unique
  score     Float
  feedback  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model UserProgress {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  content     Content   @relation(fields: [contentId], references: [id])
  contentId   Int
  completedAt DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}
